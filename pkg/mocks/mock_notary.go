// Code generated by MockGen. DO NOT EDIT.
// Source: ../notary/notary.go

// Package mocks is a generated GoMock package.
package mocks

import (
	notary "github.com/codenotary/ctrlt/pkg/notary"
	object "github.com/codenotary/objects/pkg/object"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotary is a mock of Notary interface
type MockNotary struct {
	ctrl     *gomock.Controller
	recorder *MockNotaryMockRecorder
}

// MockNotaryMockRecorder is the mock recorder for MockNotary
type MockNotaryMockRecorder struct {
	mock *MockNotary
}

// NewMockNotary creates a new mock instance
func NewMockNotary(ctrl *gomock.Controller) *MockNotary {
	mock := &MockNotary{ctrl: ctrl}
	mock.recorder = &MockNotaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotary) EXPECT() *MockNotaryMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockNotary) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockNotaryMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNotary)(nil).Start))
}

// Notarize mocks base method
func (m *MockNotary) Notarize(object *object.Object, status string) (*notary.Notarization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notarize", object, status)
	ret0, _ := ret[0].(*notary.Notarization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notarize indicates an expected call of Notarize
func (mr *MockNotaryMockRecorder) Notarize(object, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notarize", reflect.TypeOf((*MockNotary)(nil).Notarize), object, status)
}

// Authenticate mocks base method
func (m *MockNotary) Authenticate(object *object.Object) (*notary.Notarization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", object)
	ret0, _ := ret[0].(*notary.Notarization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockNotaryMockRecorder) Authenticate(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockNotary)(nil).Authenticate), object)
}

// AuthenticateBatch mocks base method
func (m *MockNotary) AuthenticateBatch(objects []*object.Object) ([]notary.Notarization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateBatch", objects)
	ret0, _ := ret[0].([]notary.Notarization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateBatch indicates an expected call of AuthenticateBatch
func (mr *MockNotaryMockRecorder) AuthenticateBatch(objects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateBatch", reflect.TypeOf((*MockNotary)(nil).AuthenticateBatch), objects)
}

// History mocks base method
func (m *MockNotary) History(object *object.Object) ([]*notary.Notarization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", object)
	ret0, _ := ret[0].([]*notary.Notarization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History
func (mr *MockNotaryMockRecorder) History(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockNotary)(nil).History), object)
}
